<?php

/**
 * @file
 * A simple n-star voting widget, usable in other forms.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implementation of hook_help().
 */
function fivestar_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fivestar':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Fivestar voting module is a very simple rating module that provides the possibility to rate items with stars or similar items. This gives you the possibilities to rate various items or even to create online forms for evaluations and assessments with different questions to be answered. For more information, see the <a href=":online">online documentation for the Fivestar module</a>.', [':online' => 'https://www.drupal.org/documentation/modules/fivestar']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('General') . '</dt>';
      $output .= '<dd>' . t("The Fivestar module can be used to easily rate various types of content on your website. These ratings can be used on the content itself or even from the comments of that piece of content.") . '</dd>';
      $output .= '<dt>' . t('Basic Concepts and Features') . '</dt>';
      $output .= '<dd>' . t('Fivestar is an excellent voting widget first made available for use on Drupal 5 websites. The D5 module included the ability to create a voting widget for nodes. With Drupal 6 came the ability to add comments. And with Drupal 7, the web developer was given the ability to create the voting widget with any entity.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_microdata_suggestions().
 */
function fivestar_microdata_suggestions() {
  $mappings = [];

  // Add the review mapping for Schema.org.
  $mappings['fields']['fivestar']['schema.org'] = [
    '#itemprop' => ['aggregateRating'],
    '#is_item' => TRUE,
    '#itemtype' => ['http://schema.org/AggregateRating'],
    'average_rating' => [
      '#itemprop' => ['ratingValue'],
    ],
    'rating_count' => [
      '#itemprop' => ['ratingCount'],
    ],
  ];

  return $mappings;
}

/**
 * Implementation of hook_theme().
 */
function fivestar_theme() {
  return [
    'fivestar' => [
      'function' => 'theme_fivestar',
      'render element' => 'element',
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_select' => [
      'function' => 'theme_fivestar_select',
      'render element' => 'element',
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_static' => [
      'function' => 'theme_fivestar_static',
      'variables' => ['rating' => NULL, 'stars' => 5, 'vote_type' => 'vote', 'widget' => ['name' => 'default', 'css' => '']],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_static_element' => [
      'function' => 'theme_fivestar_static_element',
      'variables' => ['star_display' => NULL, 'title' => NULL, 'description' => NULL],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_summary' => [
      'function' => 'theme_fivestar_summary',
      'variables' => [
        'user_rating' => NULL,
        'average_rating' => NULL,
        'votes' => 0,
        'stars' => 5,
        'microdata' => [],
      ],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_preview' => [
      'function' => 'theme_fivestar_preview',
      'variables' => ['style' => NULL, 'text' => NULL, 'stars' => NULL, 'unvote' => NULL, 'title' => NULL],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_preview_widget' => [
      'function' => 'theme_fivestar_preview_widget',
      'variables' => ['css' => NULL, 'name' => NULL],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_preview_wrapper' => [
      'function' => 'theme_fivestar_preview_wrapper',
      'variables' => ['content' => NULL, 'type' => 'direct'],
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_formatter_default' => [
      'function' => 'theme_fivestar_formatter_default',
      'render element' => 'element',
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_formatter_rating' => [
      'function' => 'theme_fivestar_formatter_rating',
      'render element' => 'element',
      'file' => 'includes/fivestar.theme.inc',
    ],
    'fivestar_formatter_percentage' => [
      'function' => 'theme_fivestar_formatter_percentage',
      'render element' => 'element',
      'file' => 'includes/fivestar.theme.inc',
    ],
  ];
}

/**
 * Implementation of hook_fivestar_access().
 *
 * This hook is called before every vote is cast through Fivestar. It allows
 * modules to allow voting on any type of entity, such as nodes, users, or
 * comments.
 *
 * @param $entity_type
 *   Type entity.
 * @param $id
 *   Identifier within the type.
 * @param $vote_type
 *   The VotingAPI tag string.
 * @param $uid
 *   The user ID trying to cast the vote.
 *
 * @return boolean or NULL
 *   Returns TRUE if voting is supported on this object.
 *   Returns NULL if voting is not supported on this object by this module.
 *   If needing to absolutely deny all voting on this object, regardless
 *   of permissions defined in other modules, return FALSE. Note if all
 *   modules return NULL, stating no preference, then access will be denied.
 */
function fivestar_fivestar_access($entity_type, $id, $vote_type, $uid) {
  // Check to see if there is a field instance on this entity.
  $fields = field_read_fields(['module' => 'fivestar']);
  foreach ($fields as $field) {
    if ($field['settings']['axis'] == $vote_type) {
      $params = [
        'entity_type' => $entity_type,
        'field_name' => $field['field_name'],
      ];
      $instance = field_read_instances($params);
      if (!empty($instance)) {
        return TRUE;
      }
    }
  }
}

/**
 * Implementation of hook_form_comment_form_alter().
 *
 * This hook removes the parent node, together with the fivestar field, from
 * the comment preview page. If this is left in, when the user presses the
 * "Save" button after the preview page has been displayed, the fivestar widget
 * gets the input rather than the comment; the user's input is lost. Based on a
 * suggestion by ChristianAdamski in issue 1289832-3.
 */
function fivestar_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $fivestar_field_keys = [];
  if (isset($form['comment_output_below'])) {
    foreach ($form['comment_output_below'] as $key => $value) {
      if (is_array($value) && !empty($value['#field_type']) && $value['#field_type'] == 'fivestar') {
        $fivestar_field_keys[] = $key;
      }
    }
  }
  if ($fivestar_field_keys) {
    foreach ($fivestar_field_keys as $key) {
      unset($form['comment_output_below'][$key]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fivestar_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  /** @var Drupal\field\FieldStorageConfigInterface $field */
  $field = $form['#field'];
  if ($field->getType() == 'fivestar') {
    // Multiple values is not supported with Fivestar.
    $form['field']['cardinality']['#access'] = FALSE;
    $form['field']['cardinality']['#value'] = 1;
    // Setting "default value" here is confusing and for all practical purposes
    // with existing widgets provided by fivestar (and anything else available
    // in contrib) meaningless.
    $form['instance']['default_value_widget']['#access'] = FALSE;
  }
}

/**
 * Implementation of hook_fivestar_widgets().
 *
 * This hook allows other modules to create additional custom widgets for
 * the fivestar module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a fivestar widget. Each value should be the name of the widget.
 */
function fivestar_fivestar_widgets() {
  $widgets = &drupal_static(__FUNCTION__);
  if (!isset($widgets)) {
    $cache = \Drupal::cache()->get(__FUNCTION__);
    if ($cache) {
      $widgets = $cache->data;
    }
  }

  if (!isset($widgets)) {
    $widgets_directory = drupal_get_path('module', 'fivestar') . '/widgets';
    $files = file_scan_directory($widgets_directory, '/\.css$/');
    foreach ($files as $file) {
      if (strpos($file->filename, '-rtl.css') === FALSE) {
        $widgets[$file->uri] = Unicode::ucfirst(str_replace('-color', '', $file->name));
      }
    }
    \Drupal::cache()->set(__FUNCTION__, $widgets);
  }
  return $widgets;
}

/**
 * Implements hook_library_info_build().
 */
function fivestar_library_info_build() {
  $libraries = [];
  $module_path = drupal_get_path('module', 'fivestar');
  foreach (\Drupal::moduleHandler()->invokeAll('fivestar_widgets') as $path => $widget) {
    // @todo ok, that's wierd.
    $path = str_replace($module_path . '/', '', $path);
    $name = mb_strtolower($widget);
    $libraries["fivestar.{$name}"] = [
      'css' => [
        'component' => [
          $path => [],
        ],
      ],
    ];
  }
  return $libraries;
}
